@page "/statistics"
@using HealthSystem.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@attribute [Authorize]
@rendermode InteractiveServer

<select @onchange="OnSelectionChanged">
    @foreach (var item in informationTypes)
    {
        <option value="@item.Id">@item.Description</option>
    }
</select>

@if (selectedType is not null)
{
    <Line Data="data" Config="config" />
}

@code {
    InformationType[] informationTypes;
    InformationType selectedType;
    string userId;
    object[] data;
    LineConfig config = new LineConfig()
        {
            Padding = "auto",
            XField = "date",
            YField = "value",
            Smooth = true,
        };

    protected override async Task OnInitializedAsync()
    {
        using var Context = DbFactory.CreateDbContext();
        informationTypes = Context.InformationType.ToArray();
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        userId = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value ?? "";
    }
    private void OnSelectionChanged(ChangeEventArgs e)
    {
        selectedType = informationTypes.Single(x => x.Id == Convert.ToInt32(e.Value));
        using var Context = DbFactory.CreateDbContext();
        //data is averaged per month, then displayed as the month and the average value of that month
        data = Context.MedicalInformation.Where(x=>x.UserId==userId).GroupBy(x => new { x.Entry_Date.Year, x.Entry_Date.Month }).Select(x => new { date = $"{x.Key.Month}-{x.Key.Year}", value = x.Average(y => y.Value) }).ToArray();
    }
}
