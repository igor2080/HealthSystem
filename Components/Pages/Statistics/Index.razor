@page "/statistics"
@using HealthSystem.Data
@using static HealthSystem.Data.Utils
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IJSRuntime JSRuntime
@inject EmailService EmailService
@attribute [Authorize]
@rendermode InteractiveServer



<div class="displayTable">
    <div class="displayTableHeader">
        <div class="tableLabel date">
            <InputSelect TValue="int" Value="year" ValueChanged="OnSelectionChanged" ValueExpression="@(() => year)">
                <option>2024</option>
                <option>2023</option>
                <option>2022</option>
                <option>2021</option>
                <option>2020</option>
            </InputSelect>
        </div>
        <div class="tableEmpty"></div>
        <div class="tableValueHeader">January</div>
        <div class="tableValueHeader">February</div>
        <div class="tableValueHeader">March</div>
        <div class="tableValueHeader">April</div>
        <div class="tableValueHeader">May</div>
        <div class="tableValueHeader">June</div>
        <div class="tableValueHeader">July</div>
        <div class="tableValueHeader">August</div>
        <div class="tableValueHeader">September</div>
        <div class="tableValueHeader">October</div>
        <div class="tableValueHeader">November</div>
        <div class="tableValueHeader">December</div>
    </div>
    @foreach (var itemGroup in MedicalInformation)
    {
        <div>
            <div class="tableLabel">@informationTypes[itemGroup.Key - 1].Description</div>
            <div class="tableEmpty"></div>
            @for (int i = 1; i <= 12; i++)
            {
                var item = itemGroup.OrderBy(x => x.Entry_Date).LastOrDefault(x => x.Entry_Date.Month == i);
                <div class="tableValue @GetCalculationScore(itemGroup.Key, item?.Value??0, item?.SecondaryValue)">
                    @(item?.Value ?? 0)
                    @if (itemGroup.Key == 2)//blood pressure
                    {
                        @(" - " + (item?.SecondaryValue ?? 0))
                    }
                </div>
            }
        </div>
    }
    <hr />
    <div>
        <div class="tableLabel">Metabolic health index</div>
        <div class="tableEmpty"></div>
        @for (int i = 1; i <= 12; i++)
        {
            if (MedicalInformation.Count > 0)
            {
                var item = MedicalInformation.Select(x => x?.LastOrDefault(y => y.Entry_Date.Month == i)).ToList();

                var healthScore = @GetMetabolicHealth(user,
                item.FirstOrDefault(x => x?.InformationTypeId == 1)?.Value ?? 0,
                item.FirstOrDefault(x => x?.InformationTypeId == 2)?.Value ?? 0,
                item.FirstOrDefault(x => x?.InformationTypeId == 2)?.SecondaryValue ?? 0,
                item.FirstOrDefault(x => x?.InformationTypeId == 3)?.Value ?? 0,
                item.FirstOrDefault(x => x?.InformationTypeId == 4)?.Value ?? 0,
                item.FirstOrDefault(x => x?.InformationTypeId == 5)?.Value ?? 0,
                item.FirstOrDefault(x => x?.InformationTypeId == 6)?.Value ?? 0,
                item.FirstOrDefault(x => x?.InformationTypeId == 7)?.Value ?? 0,
                item.FirstOrDefault(x => x?.InformationTypeId == 8)?.Value ?? 0,
                item.FirstOrDefault(x => x?.InformationTypeId == 9)?.Value ?? 0);
                <div class="tableValue metabolic @Enum.GetName(GetMetabolicHealthScore(healthScore))">
                    @healthScore
                </div>
            }
            else
            {
                <div class="tableValue metabolic bad">
                    0
                </div>
            }

        }
    </div>
</div>


<button class="btn btn-light" @onclick="DownloadGraph">Download</button>
<button class="btn btn-info" @onclick="SendGraph">Send as Email</button>

@code {
    List<InformationType> informationTypes;
    List<IGrouping<int, MedicalInformation>> MedicalInformation;
    int year = DateTime.Now.Year;
    string userId;
    ApplicationUser user;

    protected override async Task OnInitializedAsync()
    {
        using var Context = DbFactory.CreateDbContext();
        informationTypes = Context.InformationType.Where(x => x.Id < 10).ToList();
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        userId = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value ?? "";
        user = await UserManager.FindByIdAsync(userId);
        UpdateTableData(year);
    }

    private void OnSelectionChanged(int e)
    {
        year = e;
        UpdateTableData(year);

    }

    private void UpdateTableData(int year)
    {
        using var context = DbFactory.CreateDbContext();
        MedicalInformation = context.MedicalInformation.Where(x => x.UserId == userId && x.Entry_Date.Year == year).OrderBy(x => x.Entry_Date).GroupBy(x => x.InformationTypeId).ToList();

        StateHasChanged();
    }

    private string GetCalculationScore(int informationTypeId, float value, float? secondValue)
    {
        switch (informationTypeId)
        {
            case 1:
                return Enum.GetName(GetWaistScore(user, value));
            case 2:
                return Enum.GetName(GetBloodPressureScore(value, secondValue ?? 0));
            case 3:
                return Enum.GetName(GetBMIScore(user.Height, value));
            case 4:
                return Enum.GetName(GetRestingHeartRateScore(value));
            case 5:
                return Enum.GetName(GetCGMScore(value));
            case 6:
                return Enum.GetName(GetInsulinScore(value));
            case 7:
                return Enum.GetName(GetTriglycerideScore(value));
            case 8:
                return Enum.GetName(GetHDLCholesterolScore(value));
            case 9:
                return Enum.GetName(GetLDLCholesterolScore(value));
            default:
                return "bad";
        }
    }


    private async Task DownloadGraph()
    {
        await JSRuntime.InvokeVoidAsync("downloadCurrentPageGraph", "data" + ".png");
    }

    private async Task SendGraph()
    {
        var image = await JSRuntime.InvokeAsync<string>("getGraphAsImage");
        await EmailService.SendEmailWithImageAsync("master20802@gmail.com", "test email", "", image);
    }
}
