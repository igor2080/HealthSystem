@page "/add-info"
@using CsvHelper
@using CsvHelper.Configuration
@using HealthSystem.Data
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Globalization
@using static HealthSystem.Data.Utils
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject HttpClient Http
@rendermode InteractiveServer
@attribute [Authorize]

<div class="container">
    <EditForm Model="Input" FormName="info" OnValidSubmit="OnValidSubmitAsync" method="post">
        <div class="date-row">
            <div class="form-floating mb-3">
                <InputDate Type="InputDateType.Month" @bind-Value="Input.InfoDate" @bind-Value:after="@(()=>{UpdateValues();})" class="form-control addinfo-date" aria-required="true" />
                <label for="date-of-birth" class="form-label addinfo-label">Information Date</label>
                <ValidationMessage For="() => Input.InfoDate" class="text-danger" />
            </div>
        </div>
        <div>
            <div class="info-row">
                <div class="info-label">Waist Size</div>
                <div class="info-value"><InputNumber class="addinfo-number" @bind-Value="Input.WaistSize" /></div>
                <div class="info-range">
                    <div class="threshold-bar">
                        <div class="segment LeftBad"></div>
                        <div class="segment LeftOkay"></div>
                        <div class="segment Healthy"></div>
                        <div class="segment RightOkay"></div>
                        <div class="segment RightBad"></div>
                        @{
                            float first, second, third, fourth;
                            if (user.Gender.Equals("male", StringComparison.CurrentCultureIgnoreCase))
                            {
                                first = 0.38f;
                                second = 0.43f;
                                third = 0.5f;
                                fourth = 0.55f;
                            }
                            else
                            {
                                first = 0.35f;
                                second = 0.42f;
                                third = 0.48f;
                                fourth = 0.55f;
                            }
                        }
                        <div class="indicator" style="left: @(GetPercentage(first,second,third,fourth,(Input.WaistSize / user.Height)))%;"><span class="value @(Enum.GetName(GetWaistScore(user, Input.WaistSize)))-color">@Input.WaistSize</span></div>
                    </div>
                </div>
            </div>

            <div class="info-row">
                <div class="info-label">Blood Pressure Diastolic, Systolic</div>
                <div class="info-value"><InputNumber class="addinfo-number" @bind-Value="Input.BloodPressureLower" /><InputNumber class="addinfo-number" @bind-Value="Input.BloodPressureUpper" /></div>
                <div class="info-range">
                    <div class="threshold-bar">
                        <div class="segment LeftBad"></div>
                        <div class="segment LeftOkay"></div>
                        <div class="segment Healthy"></div>
                        <div class="segment RightOkay"></div>
                        <div class="segment RightBad"></div>
                        <div class="indicator" style="left: 50%;"><span class="value @(Enum.GetName(GetBloodPressureScore(Input.BloodPressureUpper,Input.BloodPressureLower)))-color">@Input.BloodPressureLower - @Input.BloodPressureUpper</span></div>
                        @* <div class="indicator" style="left: 70%;"><span class="value Healthy-color">70</span></div> *@
                    </div>
                </div>
            </div>

            <div class="info-row">
                <div class="info-label">Weight</div>
                <div class="info-value"><InputNumber class="addinfo-number" @bind-Value="Input.Weight" /></div>
                <div class="info-range">
                    <div class="threshold-bar">
                        <div class="segment LeftBad"></div>
                        <div class="segment LeftOkay"></div>
                        <div class="segment Healthy"></div>
                        <div class="segment RightOkay"></div>
                        <div class="segment RightBad"></div>
                        <div class="indicator" style="left: @(GetPercentage(15,18.5f,25,28,GetBMI(user.Height,Input.Weight)))%;"><span class="value @(Enum.GetName(GetBMIScore(user.Height, Input.Weight)))-color">@Input.Weight</span></div>
                    </div>
                </div>
            </div>

            <div class="info-row">
                <div class="info-label">Resting Heart Rate</div>
                <div class="info-value"><InputNumber class="addinfo-number" @bind-Value="Input.RestingHeartRate" /></div>
                <div class="info-range">
                    <div class="threshold-bar">
                        <div class="segment LeftBad"></div>
                        <div class="segment LeftOkay"></div>
                        <div class="segment Healthy"></div>
                        <div class="segment RightOkay"></div>
                        <div class="segment RightBad"></div>
                        <div class="indicator" style="left: @(GetPercentage(35,40,60,80,Input.RestingHeartRate))%;"><span class="value @(Enum.GetName(GetRestingHeartRateScore(Input.RestingHeartRate)))-color">@Input.RestingHeartRate</span></div>
                    </div>
                </div>
            </div>

            <div class="info-row">
                <div class="info-label">CGM</div>
                <div class="info-value"><InputNumber class="addinfo-number" @bind-Value="Input.CGM" /></div>
                <div class="info-range">
                    <div class="threshold-bar">
                        <div class="segment LeftBad"></div>
                        <div class="segment LeftOkay"></div>
                        <div class="segment Healthy"></div>
                        <div class="segment RightOkay"></div>
                        <div class="segment RightBad"></div>
                        <div class="indicator" style="left: @(GetPercentage(70,75,100,105,Input.CGM))%;"><span class="value @(Enum.GetName(GetCGMScore(Input.CGM)))-color">@Input.CGM</span></div>
                    </div>
                </div>
            </div>

            <div class="info-row">
                <div class="info-label">Insulin</div>
                <div class="info-value"><InputNumber class="addinfo-number" @bind-Value="Input.Insulin" /></div>
                <div class="info-range">
                    <div class="threshold-bar">
                        <div class="segment LeftBad"></div>
                        <div class="segment LeftOkay"></div>
                        <div class="segment Healthy"></div>
                        <div class="segment RightOkay"></div>
                        <div class="segment RightBad"></div>
                        <div class="indicator" style="left: @(GetPercentage(1.5f,2.6f,5,11,Input.Insulin))%;"><span class="value @(Enum.GetName(GetInsulinScore(Input.Insulin)))-color">@Input.Insulin</span></div>
                    </div>
                </div>
            </div>

            <div class="info-row">
                <div class="info-label">Triglyceride</div>
                <div class="info-value"><InputNumber class="addinfo-number" @bind-Value="Input.Triglyceride" /></div>
                <div class="info-range">
                    <div class="threshold-bar">
                        <div class="segment LeftBad"></div>
                        <div class="segment LeftOkay"></div>
                        <div class="segment Healthy"></div>
                        <div class="segment RightOkay"></div>
                        <div class="segment RightBad"></div>
                        <div class="indicator" style="left: @(GetPercentage(45,49,180,200,Input.Triglyceride))%;"><span class="value @(Enum.GetName(GetTriglycerideScore(Input.Triglyceride)))-color">@Input.Triglyceride</span></div>
                    </div>
                </div>
            </div>

            <div class="info-row">
                <div class="info-label">HDL Cholesterol</div>
                <div class="info-value"><InputNumber class="addinfo-number" @bind-Value="Input.HDLCholesterol" /></div>
                <div class="info-range">
                    <div class="threshold-bar">
                        <div class="segment LeftBad"></div>
                        <div class="segment LeftOkay"></div>
                        <div class="segment Healthy"></div>
                        <div class="segment RightOkay"></div>
                        <div class="segment RightBad"></div>
                        <div class="indicator" style="left: @(GetPercentage(40,50,60,70,Input.HDLCholesterol))%;"><span class="value @(Enum.GetName(GetHDLCholesterolScore(Input.HDLCholesterol)))-color">@Input.HDLCholesterol</span></div>
                    </div>
                </div>
            </div>

            <div class="info-row">
                <div class="info-label">LDL Cholesterol</div>
                <div class="info-value"><InputNumber class="addinfo-number" @bind-Value="Input.LDLCholesterol" /></div>
                <div class="info-range">
                    <div class="threshold-bar">
                        <div class="segment LeftBad"></div>
                        <div class="segment LeftOkay"></div>
                        <div class="segment Healthy"></div>
                        <div class="segment RightOkay"></div>
                        <div class="segment RightBad"></div>
                        <div class="indicator" style="left: @(GetPercentage(70,100,130,160,Input.LDLCholesterol))%;"><span class="value @(Enum.GetName(GetLDLCholesterolScore(Input.LDLCholesterol)))-color">@Input.LDLCholesterol</span></div>
                    </div>
                </div>
            </div>

        </div>
        <button>Save</button>
    </EditForm>
</div>




@code {
    private InputModel Input { get; set; } = new();
    private string status;
    string userId;
    ApplicationUser user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        userId = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value ?? "";
        user = await UserManager.FindByIdAsync(userId);
        UpdateValues();

        //try get data from intervals
        if (Input.RestingHeartRate == 0)
        {
            if (!Http.DefaultRequestHeaders.Contains("authorization"))
                Http.DefaultRequestHeaders.Add("authorization", $"Basic {Convert.ToBase64String(Encoding.UTF8.GetBytes($"API_KEY:{user.Intervals_API}"))}");
            var response = await Http.GetAsync(@"https://intervals.icu/api/v1/athlete/0/activities.csv");
            if (response.IsSuccessStatusCode)
            {
                var config = new CsvConfiguration(CultureInfo.InvariantCulture)
                    {
                        PrepareHeaderForMatch = args => args.Header.ToLower(),
                    };
                using var reader = new StreamReader(response.Content.ReadAsStream());
                using var csv = new CsvReader(reader, config);
                var alldata = csv.GetRecords<Activity>().Where(x => x.start_date.Year == Input.InfoDate.Year && x.start_date.Month == Input.InfoDate.Month).ToList();
                if (alldata.Count > 0)
                {
                    var hr = alldata.Select(x => x.icu_resting_hr).ToList();
                    Input.RestingHeartRate = hr.Last();
                    StateHasChanged();
                }
            }
        }
    }

    private void UpdateValues()
    {
        using var Context = DbFactory.CreateDbContext();
        var medicalInfo = Context.MedicalInformation.Where(x => x.Entry_Date.Year == Input.InfoDate.Year && x.Entry_Date.Month == Input.InfoDate.Month && x.UserId == userId).OrderBy(x => x.Entry_Date);

        Input.WaistSize = medicalInfo.LastOrDefault(x => x.InformationTypeId == 1)?.Value ?? 0;
        Input.BloodPressureLower = medicalInfo.LastOrDefault(x => x.InformationTypeId == 2)?.Value ?? 0;
        Input.BloodPressureUpper = medicalInfo.LastOrDefault(x => x.InformationTypeId == 2)?.SecondaryValue ?? 0;
        Input.Weight = medicalInfo.LastOrDefault(x => x.InformationTypeId == 3)?.Value ?? 0;
        Input.RestingHeartRate = medicalInfo.LastOrDefault(x => x.InformationTypeId == 4)?.Value ?? 0;
        Input.CGM = medicalInfo.LastOrDefault(x => x.InformationTypeId == 5)?.Value ?? 0;
        Input.Insulin = medicalInfo.LastOrDefault(x => x.InformationTypeId == 6)?.Value ?? 0;
        Input.Triglyceride = medicalInfo.LastOrDefault(x => x.InformationTypeId == 7)?.Value ?? 0;
        Input.HDLCholesterol = medicalInfo.LastOrDefault(x => x.InformationTypeId == 8)?.Value ?? 0;
        Input.LDLCholesterol = medicalInfo.LastOrDefault(x => x.InformationTypeId == 9)?.Value ?? 0;
    }

    private void OnDateChanged(DateTime newValue)
    {
        UpdateValues();
    }

    private async Task OnValidSubmitAsync(EditContext editContext)
    {
        using var Context = DbFactory.CreateDbContext();

        int id;
        if (Context.MedicalInformation.Count() < 1)
            id = 0;
        else
            id = Context.MedicalInformation.OrderByDescending(x => x.Id).First().Id;

        var medicalInfo = Context.MedicalInformation.Where(x => x.Entry_Date.Year == Input.InfoDate.Year && x.Entry_Date.Month == Input.InfoDate.Month && x.UserId == userId).OrderBy(x => x.Entry_Date);

        var waistSize = medicalInfo.LastOrDefault(x => x.InformationTypeId == 1);
        if (waistSize is null)
        {
            Context.MedicalInformation.Add(new MedicalInformation()
                {
                    Entry_Date = Input.InfoDate,
                    UserId = userId,
                    Id = ++id,
                    InformationTypeId = 1,
                    Value = Input.WaistSize,
                });
        }
        else
        {
            waistSize.Value = Input.WaistSize;
        }

        var bloodPressure = medicalInfo.LastOrDefault(x => x.InformationTypeId == 2);
        if (bloodPressure is null)
        {
            Context.MedicalInformation.Add(new MedicalInformation()
                {
                    Entry_Date = Input.InfoDate,
                    UserId = userId,
                    Id = ++id,
                    InformationTypeId = 2,
                    Value = Input.BloodPressureUpper,
                    SecondaryValue = Input.BloodPressureLower,
                });
        }
        else
        {
            bloodPressure.Value = Input.BloodPressureUpper;
            bloodPressure.SecondaryValue = Input.BloodPressureLower;
        }

        var weight = medicalInfo.LastOrDefault(x => x.InformationTypeId == 3);
        if (weight is null)
        {
            Context.MedicalInformation.Add(new MedicalInformation()
                {
                    Entry_Date = Input.InfoDate,
                    UserId = userId,
                    Id = ++id,
                    InformationTypeId = 3,
                    Value = Input.Weight,
                });
        }
        else
        {
            weight.Value = Input.Weight;
        }

        var heartRate = medicalInfo.LastOrDefault(x => x.InformationTypeId == 4);
        if (heartRate is null)
        {
            Context.MedicalInformation.Add(new MedicalInformation()
                {
                    Entry_Date = Input.InfoDate,
                    UserId = userId,
                    Id = ++id,
                    InformationTypeId = 4,
                    Value = Input.RestingHeartRate,
                });
        }
        else
        {
            heartRate.Value = Input.RestingHeartRate;
        }

        var cgm = medicalInfo.LastOrDefault(x => x.InformationTypeId == 5);
        if (cgm is null)
        {
            Context.MedicalInformation.Add(new MedicalInformation()
                {
                    Entry_Date = Input.InfoDate,
                    UserId = userId,
                    Id = ++id,
                    InformationTypeId = 5,
                    Value = Input.CGM,
                });
        }
        else
        {
            cgm.Value = Input.CGM;
        }

        var insulin = medicalInfo.LastOrDefault(x => x.InformationTypeId == 6);
        if (insulin is null)
        {
            Context.MedicalInformation.Add(new MedicalInformation()
                {
                    Entry_Date = Input.InfoDate,
                    UserId = userId,
                    Id = ++id,
                    InformationTypeId = 6,
                    Value = Input.Insulin,
                });
        }
        else
        {
            insulin.Value = Input.Insulin;
        }

        var triglyceride = medicalInfo.LastOrDefault(x => x.InformationTypeId == 7);
        if (triglyceride is null)
        {
            Context.MedicalInformation.Add(new MedicalInformation()
                {
                    Entry_Date = Input.InfoDate,
                    UserId = userId,
                    Id = ++id,
                    InformationTypeId = 7,
                    Value = Input.Triglyceride,
                });
        }
        else
        {
            triglyceride.Value = Input.Triglyceride;
        }

        var hdlcholesterol = medicalInfo.LastOrDefault(x => x.InformationTypeId == 8);
        if (hdlcholesterol is null)
        {
            Context.MedicalInformation.Add(new MedicalInformation()
                {
                    Entry_Date = Input.InfoDate,
                    UserId = userId,
                    Id = ++id,
                    InformationTypeId = 8,
                    Value = Input.HDLCholesterol,
                });
        }
        else
        {
            hdlcholesterol.Value = Input.HDLCholesterol;
        }

        var ldlcholesterol = medicalInfo.LastOrDefault(x => x.InformationTypeId == 9);
        if (ldlcholesterol is null)
        {
            Context.MedicalInformation.Add(new MedicalInformation()
                {
                    Entry_Date = Input.InfoDate,
                    UserId = userId,
                    Id = ++id,
                    InformationTypeId = 9,
                    Value = Input.LDLCholesterol,
                });
        }
        else
        {
            ldlcholesterol.Value = Input.LDLCholesterol;
        }

        await Context.SaveChangesAsync();
        StateHasChanged();
        status = "Your profile has been updated";


    }

    private sealed class InputModel
    {
        public float WaistSize { get; set; } = 0;
        public float BloodPressureLower { get; set; } = 0;
        public float BloodPressureUpper { get; set; } = 0;
        public float Weight { get; set; } = 0;
        public float RestingHeartRate { get; set; } = 0;
        public float CGM { get; set; } = 0;
        public float Insulin { get; set; } = 0;
        public float Triglyceride { get; set; } = 0;
        public float HDLCholesterol { get; set; } = 0;
        public float LDLCholesterol { get; set; } = 0;

        [Required]
        [Display(Name = "Information date")]
        [DataType(DataType.DateTime)]
        public DateTime InfoDate { get; set; } = DateTime.Now;
    }
}
