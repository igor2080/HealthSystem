@page "/messages"
@using HealthSystem.Data
@using static Data.Utils
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@attribute [Authorize]
@rendermode InteractiveServer

<div class="container">
    <div class="messageList">
        <div class="messageListTitle">Messages</div>
        @foreach (var thread in MessageThreads)
        {
            <div class="messageThread @(thread[0].ReadDate.HasValue?"":"bold") @(thread[0].Id==currentMessageId?"active":"")" @onclick="async ()=>{await SetActive(thread[0].Id);}">
                <div class="messageThreadDate">@thread.Last().Date</div>
                <div class="messageThreadTitle">@thread[0].Title</div>
            </div>
        }
    </div>
    <div class="messageDetails">
        @if (currentMessageId > 0)
        {
            <div class="messageContentTitle">
                Message
            </div>

            <div class="messageContent">
                @foreach (var threadMessage in currentThread)
                {
                    <div class="@(threadMessage.SenderId == user.Id ? "right" : "left")">
                        @threadMessage.Content
                    </div>
                }
            </div>
            <hr />
            <span>Reply</span>
            <div class="reply">
                <EditForm method="post" Model="Message" OnValidSubmit="SendResponse">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="mb-3">
                        <label for="description" class="form-label">Message:</label>
                        <InputText id="description" @bind-Value="Message.Content" class="form-control" />
                        <ValidationMessage For="() => Message.Content" class="text-danger" />
                    </div>
                    <button type="submit" class="btn btn-primary">Reply</button>
                </EditForm>
            </div>
        }
    </div>
</div>


@code {
    List<Message> Messages = new();
    List<List<Message>> MessageThreads = new();

    Message Message { get; set; } = new();
    int currentMessageId = 0;
    List<Message> currentThread;
    ApplicationUser admin;
    ApplicationUser user;

    protected override async Task OnInitializedAsync()
    {
        admin = await UserManager.FindByEmailAsync("admin@site.com");
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        user = await UserManager.FindByEmailAsync(authState.User.Identity.Name);

        using var Context = DbFactory.CreateDbContext();
        //all sent and received messages, should include all of the "related" messages too as users cannot send to other users
        Messages = Context.Message.Include("Sender").Include("Receiver").Where(x => x.SenderId == user.Id || x.ReceiverId == user.Id).OrderByDescending(x => x.Date).ToList();
        //all of the messages that were conversation starters
        MessageThreads = GetMessagesByThread(Messages);
    }

    async Task SendResponse(EditContext editContext)
    {

    }

    async Task SetActive(int messageId)
    {
        currentMessageId = messageId;
        currentThread = MessageThreads.Single(x => x[0].Id == messageId);

        //disabled for testing

        // using var Context = DbFactory.CreateDbContext();
        // Context.Message.Single(x => x.Id == messageId).ReadDate = DateTime.Now;
        // await Context.SaveChangesAsync();

        StateHasChanged();

    }
}
