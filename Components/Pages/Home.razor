@page "/"
@using CsvHelper
@using CsvHelper.Configuration
@using HealthSystem.Data
@using System.Globalization
@using System.Text
@using AntDesign.Charts
@inject HttpClient Http
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<Line Data="data" Config="config"  />
https://antblazor.com/en-US/charts/line

@if (activities != null)
{
    <ul>
        @foreach (var activity in activities)
        {
            <li>@activity.icu_resting_hr</li>
        }
    </ul>
}

@code{
    private List<Activity> activities;

     object[] data = new object[] {
        new  { year = "1991", value = 3 },
        new  { year = "1992", value = 4 },
        new  { year = "1993", value = 3.5 },
        new  { year = "1994", value = 5 },
        new  { year = "1995", value = 4.9 },
        new  { year = "1996", value = 6 },
        new  { year = "1997", value = 7 },
        new  { year = "1998", value = 9 },
        new  { year = "1999", value = 13 },
    };

    LineConfig config = new LineConfig()
        {
            Padding = "auto",
            XField = "year",
            YField = "value",
            Smooth = true,
        };

    protected override async Task OnInitializedAsync()
    {
        //sample use
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userId = authState.User?.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value ?? "";
        var user = await UserManager.FindByIdAsync(userId);
        Http.DefaultRequestHeaders.Add("authorization", $"Basic {Convert.ToBase64String(Encoding.UTF8.GetBytes($"API_KEY:{user.Intervals_API}"))}");

        var response = await Http.GetAsync(@"https://intervals.icu/api/v1/athlete/0/activities.csv");
        if (response.IsSuccessStatusCode)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
                {
                    PrepareHeaderForMatch = args => args.Header.ToLower(),
                };
            using var reader = new StreamReader(response.Content.ReadAsStream());
            using var csv = new CsvReader(reader, config);
            activities  = csv.GetRecords<Activity>().ToList();
            StateHasChanged();
        }
    }
}
