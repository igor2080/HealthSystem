@page "/recommendations/edit/{id:int}"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.EntityFrameworkCore
@using HealthSystem.Data
@using static HealthSystem.Data.Utils
@inject IDbContextFactory<HealthSystem.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Recommendation</h2>
<hr />
<div class="ErrorBox">
    @_errorMessage
</div>
@if (Recommendation is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Recommendation" OnValidSubmit="UpdateRecommendation" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Recommendation.Description" class="form-control" />
                    <ValidationMessage For="() => Recommendation.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="study_link" class="form-label">Study Link:</label>
                    <InputText id="study_link" @bind-Value="Recommendation.Study_Link" class="form-control" />
                    <ValidationMessage For="() => Recommendation.Study_Link" class="text-danger" />
                </div>
                <hr />
                <span>Add parameters</span>
                <input class="btn btn-info" @onclick="AddNewParameter" type="button" value="+" />
                <div class="parameter-group">
                    @foreach (var parameter in TriggerParameters)
                    {
                        <div class="trigger-group">
                            <div>
                                <div class="form-floating">
                                    <InputSelect class="form-control" @bind-Value="parameter.InformationTypeId">
                                        <option value="" selected disabled>
                                            Select parameter type ...
                                        </option>
                                        @foreach (var informationType in InformationTypes)
                                        {
                                            <option checked="@(parameter.InformationTypeId == informationType.Id)" value="@informationType.Id">
                                                @informationType.Description
                                            </option>
                                        }
                                    </InputSelect>
                                    <label for="parameter">Parameter type</label>
                                    <ValidationMessage For="() => parameter.Type" class="text-danger" />
                                </div>

                                <div class="form-floating">
                                    <InputSelect class="form-control" @bind-Value="parameter.DynamicsScore">
                                        <option value="" selected disabled>
                                            Select score ...
                                        </option>
                                        @foreach (DynamicsScore score in Enum.GetValues(typeof(DynamicsScore)))
                                        {
                                            <option checked="@(parameter.DynamicsScore == score)" value="@score">
                                                @Enum.GetName(typeof(DynamicsScore), score)
                                            </option>
                                        }
                                    </InputSelect>
                                    <label for="score">Parameter dynamics</label>
                                    <ValidationMessage For="() => parameter.DynamicsScore" class="text-danger" />
                                </div>


                            </div>

                            <div>
                                <input class="btn btn-danger" @onclick="() => RemoveParameter(parameter)" type="button" value="-" />
                            </div>
                        </div>
                    }
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>

    <div>
        <a href="/recommendations">Back to List</a>
    </div>


}


@code {
    [Parameter]
    public int Id { get; set; }
    [SupplyParameterFromForm]
    private Recommendation? Recommendation { get; set; }
    List<TriggerParameter> TriggerParameters { get; set; } = new();
    List<InformationType> InformationTypes { get; set; } = new();
    string _errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            using var context = DbFactory.CreateDbContext();
            Recommendation ??= await context.Recommendations.FirstOrDefaultAsync(m => m.Id == Id);
            //return to the home page on an invalid recommendation
            if (Recommendation is null)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                InformationTypes = context.InformationType.ToList();
                TriggerParameters = context.TriggerParameters.Where(x => x.RecommendationId == Recommendation.Id).ToList();
            }

            StateHasChanged();
        }

    }

    private async Task UpdateRecommendation()
    {
        _errorMessage = "";

        if (TriggerParameters.Count < 1)
        {
            _errorMessage = "You must include at least one parameter in this recommendation";

            return;
        }

        using var context = DbFactory.CreateDbContext();
        context.Attach(Recommendation!).State = EntityState.Modified;

        foreach (var triggerParameter in TriggerParameters)
        {
            if (context.TriggerParameters.Any(x => x.RecommendationId == Recommendation!.Id
                && x.DynamicsScore == triggerParameter.DynamicsScore
            && x.Type == triggerParameter.Type))
            {//no changes made, no need to modify anything
                continue;
            }
            else
                context.TriggerParameters.Add(triggerParameter);
        }

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!RecommendationExists(Recommendation!.Id))
            {
                NavigationManager.NavigateTo("/recommendations");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/recommendations");
    }

    private bool RecommendationExists(int id)
    {
        using var context = DbFactory.CreateDbContext();

        return context.Recommendations.Any(e => e.Id == id);
    }

    private void AddNewParameter()
    {
        TriggerParameters.Add(new TriggerParameter()
            {
                Recommendation = Recommendation,

            });
        StateHasChanged();
    }

    private void RemoveParameter(TriggerParameter parameter)
    {
        TriggerParameters.Remove(parameter);
        using var context = DbFactory.CreateDbContext();
        context.TriggerParameters.Remove(parameter);
        context.SaveChanges();
        StateHasChanged();
    }

}
