@page "/recommendations"
@using HealthSystem.Data
@using System.Globalization
@using static HealthSystem.Data.Utils
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject EmailService EmailService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@rendermode InteractiveServer


@if (_userRoles.Contains("Admin"))
{
    <NavLink class="nav-link" href="recommendations/add">
        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Add recommendation
    </NavLink>
}
<div class="container">
    <div class="title">
        <div>Metabolic health analysis</div>
        <div>and recommendations for health improvement</div>
    </div>
    <br />
    @if (_m1Info is not null)
    {
        string m1 = _m1Info.First().Entry_Date.ToString("MMMM", CultureInfo.InvariantCulture),
        m2 = _m2Info.First().Entry_Date.ToString("MMMM", CultureInfo.InvariantCulture),
        m3 = _m3Info.First().Entry_Date.ToString("MMMM", CultureInfo.InvariantCulture);
        <div class="period">
            <div>Time period</div>
            <div class="months">@m3, @m2, @m1</div>
            <div class="years">@(_m1Info.First().Entry_Date.Year == _m3Info.First().Entry_Date.Year ? _m1Info.First().Entry_Date.Year : $"{_m1Info.First().Entry_Date.Year} - {_m3Info.First().Entry_Date.Year}")</div>
        </div>
        <br />
        <div class="parameter">
            <div class="dynamics">
                <div>Metabolic health dynamics in change:</div>
                <br />
                <div class="displayTable">
                    <div>@m3</div>
                    <div>@m2</div>
                    <div>@m1</div>
                    <div class="@Enum.GetName(_metabolicHealth.M3Score)">@_metabolicHealth.M3Value</div>
                    <div class="@Enum.GetName(_metabolicHealth.M2Score)">@_metabolicHealth.M2Value</div>
                    <div class="@Enum.GetName(_metabolicHealth.M1Score)">@_metabolicHealth.M1Value</div>
                </div>
                <div class="dynamics">
                    @Enum.GetName(_metabolicHealth.DynamicsScore)
                </div>
            </div>
            <div class="recommendations">
                @foreach (var recommendation in _metabolicHealth.Recommendations)
                {
                    <div class="recommendation">
                        <div>@recommendation.Description</div>
                        <hr />
                        <a class="recommendationLink" href="@recommendation.Study_Link">@recommendation.Study_Link</a>

                        @if (_userRoles.Contains("Admin"))
                        {
                            <hr />
                            <div class="adminButtons">
                                <button class="btn btn-outline-dark" @onclick=@(()=>{EditRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="m18.988 2.012 3 3L19.701 7.3l-3-3zM8 16h3l7.287-7.287-3-3L8 13z"></path><path d="M19 19H8.158c-.026 0-.053.01-.079.01-.033 0-.066-.009-.1-.01H5V5h6.847l2-2H5c-1.103 0-2 .896-2 2v14c0 1.104.897 2 2 2h14a2 2 0 0 0 2-2v-8.668l-2 2V19z"></path></svg></button>
                                <button class="btn btn-outline-dark" @onclick=@(async ()=>{await DeleteRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="M5 20a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V8h2V6h-4V4a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2H3v2h2zM9 4h6v2H9zM8 8h9v12H7V8z"></path><path d="M9 10h2v8H9zm4 0h2v8h-2z"></path></svg></button>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <br />
        <div class="parameter">
            <div class="dynamics">
                <div>Waist size dynamics in change:</div>
                <br />
                <div class="displayTable">
                    <div>@m3</div>
                    <div>@m2</div>
                    <div>@m1</div>
                    <div class="@Enum.GetName(_waistSize.M3Score)">@_waistSize.M3Value</div>
                    <div class="@Enum.GetName(_waistSize.M2Score)">@_waistSize.M2Value</div>
                    <div class="@Enum.GetName(_waistSize.M1Score)">@_waistSize.M1Value</div>
                </div>
                <div class="dynamics">
                    @Enum.GetName(_waistSize.DynamicsScore)
                </div>
            </div>
            <div class="recommendations">
                @foreach (var recommendation in _waistSize.Recommendations)
                {
                    <div class="recommendation">
                        <div>@recommendation.Description</div>
                        <hr />
                        <a class="recommendationLink" href="@recommendation.Study_Link">@recommendation.Study_Link</a>

                        @if (_userRoles.Contains("Admin"))
                        {
                            <hr />
                            <div class="adminButtons">
                                <button class="btn btn-outline-dark" @onclick=@(()=>{EditRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="m18.988 2.012 3 3L19.701 7.3l-3-3zM8 16h3l7.287-7.287-3-3L8 13z"></path><path d="M19 19H8.158c-.026 0-.053.01-.079.01-.033 0-.066-.009-.1-.01H5V5h6.847l2-2H5c-1.103 0-2 .896-2 2v14c0 1.104.897 2 2 2h14a2 2 0 0 0 2-2v-8.668l-2 2V19z"></path></svg></button>
                                <button class="btn btn-outline-dark" @onclick=@(async ()=>{await DeleteRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="M5 20a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V8h2V6h-4V4a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2H3v2h2zM9 4h6v2H9zM8 8h9v12H7V8z"></path><path d="M9 10h2v8H9zm4 0h2v8h-2z"></path></svg></button>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <br />
        <div class="parameter">
            <div class="dynamics">
                <div>Blood pressure dynamics in change:</div>
                <br />
                <div class="displayTable">
                    <div>@m3</div>
                    <div>@m2</div>
                    <div>@m1</div>
                    <div class="@Enum.GetName(_bloodPressure.M3Score)">@_bloodPressure.M3Value - @_bloodPressure.M3SecondValue</div>
                    <div class="@Enum.GetName(_bloodPressure.M2Score)">@_bloodPressure.M2Value - @_bloodPressure.M2SecondValue</div>
                    <div class="@Enum.GetName(_bloodPressure.M1Score)">@_bloodPressure.M1Value - @_bloodPressure.M1SecondValue</div>
                </div>
                <div class="dynamics">
                    @Enum.GetName(_bloodPressure.DynamicsScore)
                </div>
            </div>
            <div class="recommendations">
                @foreach (var recommendation in _bloodPressure.Recommendations)
                {
                    <div class="recommendation">
                        <div>@recommendation.Description</div>
                        <hr />
                        <a class="recommendationLink" href="@recommendation.Study_Link">@recommendation.Study_Link</a>

                        @if (_userRoles.Contains("Admin"))
                        {
                            <hr />
                            <div class="adminButtons">
                                <button class="btn btn-outline-dark" @onclick=@(()=>{EditRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="m18.988 2.012 3 3L19.701 7.3l-3-3zM8 16h3l7.287-7.287-3-3L8 13z"></path><path d="M19 19H8.158c-.026 0-.053.01-.079.01-.033 0-.066-.009-.1-.01H5V5h6.847l2-2H5c-1.103 0-2 .896-2 2v14c0 1.104.897 2 2 2h14a2 2 0 0 0 2-2v-8.668l-2 2V19z"></path></svg></button>
                                <button class="btn btn-outline-dark" @onclick=@(async ()=>{await DeleteRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="M5 20a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V8h2V6h-4V4a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2H3v2h2zM9 4h6v2H9zM8 8h9v12H7V8z"></path><path d="M9 10h2v8H9zm4 0h2v8h-2z"></path></svg></button>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <br />
        <div class="parameter">
            <div class="dynamics">
                <div>Weight dynamics in change:</div>
                <br />
                <div class="displayTable">
                    <div>@m3</div>
                    <div>@m2</div>
                    <div>@m1</div>
                    <div class="@Enum.GetName(_BMI.M3Score)">@_BMI.M3Value</div>
                    <div class="@Enum.GetName(_BMI.M2Score)">@_BMI.M2Value</div>
                    <div class="@Enum.GetName(_BMI.M1Score)">@_BMI.M1Value</div>
                </div>
                <div class="dynamics">
                    @Enum.GetName(_BMI.DynamicsScore)
                </div>
            </div>
            <div class="recommendations">
                @foreach (var recommendation in _BMI.Recommendations)
                {
                    <div class="recommendation">
                        <div>@recommendation.Description</div>
                        <hr />
                        <a class="recommendationLink" href="@recommendation.Study_Link">@recommendation.Study_Link</a>

                        @if (_userRoles.Contains("Admin"))
                        {
                            <hr />
                            <div class="adminButtons">
                                <button class="btn btn-outline-dark" @onclick=@(()=>{EditRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="m18.988 2.012 3 3L19.701 7.3l-3-3zM8 16h3l7.287-7.287-3-3L8 13z"></path><path d="M19 19H8.158c-.026 0-.053.01-.079.01-.033 0-.066-.009-.1-.01H5V5h6.847l2-2H5c-1.103 0-2 .896-2 2v14c0 1.104.897 2 2 2h14a2 2 0 0 0 2-2v-8.668l-2 2V19z"></path></svg></button>
                                <button class="btn btn-outline-dark" @onclick=@(async ()=>{await DeleteRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="M5 20a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V8h2V6h-4V4a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2H3v2h2zM9 4h6v2H9zM8 8h9v12H7V8z"></path><path d="M9 10h2v8H9zm4 0h2v8h-2z"></path></svg></button>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <br />
        <div class="parameter">
            <div class="dynamics">
                <div>Resting heart rate dynamics in change:</div>
                <br />
                <div class="displayTable">
                    <div>@m3</div>
                    <div>@m2</div>
                    <div>@m1</div>
                    <div class="@Enum.GetName(_restingHeartRate.M3Score)">@_restingHeartRate.M3Value</div>
                    <div class="@Enum.GetName(_restingHeartRate.M2Score)">@_restingHeartRate.M2Value</div>
                    <div class="@Enum.GetName(_restingHeartRate.M1Score)">@_restingHeartRate.M1Value</div>
                </div>
                <div class="dynamics">
                    @Enum.GetName(_restingHeartRate.DynamicsScore)
                </div>
            </div>
            <div class="recommendations">
                @foreach (var recommendation in _restingHeartRate.Recommendations)
                {
                    <div class="recommendation">
                        <div>@recommendation.Description</div>
                        <hr />
                        <a class="recommendationLink" href="@recommendation.Study_Link">@recommendation.Study_Link</a>

                        @if (_userRoles.Contains("Admin"))
                        {
                            <hr />
                            <div class="adminButtons">
                                <button class="btn btn-outline-dark" @onclick=@(()=>{EditRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="m18.988 2.012 3 3L19.701 7.3l-3-3zM8 16h3l7.287-7.287-3-3L8 13z"></path><path d="M19 19H8.158c-.026 0-.053.01-.079.01-.033 0-.066-.009-.1-.01H5V5h6.847l2-2H5c-1.103 0-2 .896-2 2v14c0 1.104.897 2 2 2h14a2 2 0 0 0 2-2v-8.668l-2 2V19z"></path></svg></button>
                                <button class="btn btn-outline-dark" @onclick=@(async ()=>{await DeleteRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="M5 20a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V8h2V6h-4V4a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2H3v2h2zM9 4h6v2H9zM8 8h9v12H7V8z"></path><path d="M9 10h2v8H9zm4 0h2v8h-2z"></path></svg></button>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <br />
        <div class="parameter">
            <div class="dynamics">
                <div>CGM dynamics in change:</div>
                <br />
                <div class="displayTable">
                    <div>@m3</div>
                    <div>@m2</div>
                    <div>@m1</div>
                    <div class="@Enum.GetName(_CGM.M3Score)">@_CGM.M3Value</div>
                    <div class="@Enum.GetName(_CGM.M2Score)">@_CGM.M2Value</div>
                    <div class="@Enum.GetName(_CGM.M1Score)">@_CGM.M1Value</div>
                </div>
                <div class="dynamics">
                    @Enum.GetName(_CGM.DynamicsScore)
                </div>
            </div>
            <div class="recommendations">
                @foreach (var recommendation in _CGM.Recommendations)
                {
                    <div class="recommendation">
                        <div>@recommendation.Description</div>
                        <hr />
                        <a class="recommendationLink" href="@recommendation.Study_Link">@recommendation.Study_Link</a>

                        @if (_userRoles.Contains("Admin"))
                        {
                            <hr />
                            <div class="adminButtons">
                                <button class="btn btn-outline-dark" @onclick=@(()=>{EditRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="m18.988 2.012 3 3L19.701 7.3l-3-3zM8 16h3l7.287-7.287-3-3L8 13z"></path><path d="M19 19H8.158c-.026 0-.053.01-.079.01-.033 0-.066-.009-.1-.01H5V5h6.847l2-2H5c-1.103 0-2 .896-2 2v14c0 1.104.897 2 2 2h14a2 2 0 0 0 2-2v-8.668l-2 2V19z"></path></svg></button>
                                <button class="btn btn-outline-dark" @onclick=@(async ()=>{await DeleteRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="M5 20a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V8h2V6h-4V4a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2H3v2h2zM9 4h6v2H9zM8 8h9v12H7V8z"></path><path d="M9 10h2v8H9zm4 0h2v8h-2z"></path></svg></button>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <br />
        <div class="parameter">
            <div class="dynamics">
                <div>Insulin dynamics in change:</div>
                <br />
                <div class="displayTable">
                    <div>@m3</div>
                    <div>@m2</div>
                    <div>@m1</div>
                    <div class="@Enum.GetName(_insulin.M3Score)">@_insulin.M3Value</div>
                    <div class="@Enum.GetName(_insulin.M2Score)">@_insulin.M2Value</div>
                    <div class="@Enum.GetName(_insulin.M1Score)">@_insulin.M1Value</div>
                </div>
                <div class="dynamics">
                    @Enum.GetName(_insulin.DynamicsScore)
                </div>
            </div>
            <div class="recommendations">
                @foreach (var recommendation in _insulin.Recommendations)
                {
                    <div class="recommendation">
                        <div>@recommendation.Description</div>
                        <hr />
                        <a class="recommendationLink" href="@recommendation.Study_Link">@recommendation.Study_Link</a>

                        @if (_userRoles.Contains("Admin"))
                        {
                            <hr />
                            <div class="adminButtons">
                                <button class="btn btn-outline-dark" @onclick=@(()=>{EditRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="m18.988 2.012 3 3L19.701 7.3l-3-3zM8 16h3l7.287-7.287-3-3L8 13z"></path><path d="M19 19H8.158c-.026 0-.053.01-.079.01-.033 0-.066-.009-.1-.01H5V5h6.847l2-2H5c-1.103 0-2 .896-2 2v14c0 1.104.897 2 2 2h14a2 2 0 0 0 2-2v-8.668l-2 2V19z"></path></svg></button>
                                <button class="btn btn-outline-dark" @onclick=@(async ()=>{await DeleteRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="M5 20a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V8h2V6h-4V4a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2H3v2h2zM9 4h6v2H9zM8 8h9v12H7V8z"></path><path d="M9 10h2v8H9zm4 0h2v8h-2z"></path></svg></button>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <br />
        <div class="parameter">
            <div class="dynamics">
                <div>Triglyceride dynamics in change:</div>
                <br />
                <div class="displayTable">
                    <div>@m3</div>
                    <div>@m2</div>
                    <div>@m1</div>
                    <div class="@Enum.GetName(_triglyceride.M3Score)">@_triglyceride.M3Value</div>
                    <div class="@Enum.GetName(_triglyceride.M2Score)">@_triglyceride.M2Value</div>
                    <div class="@Enum.GetName(_triglyceride.M1Score)">@_triglyceride.M1Value</div>
                </div>
                <div class="dynamics">
                    @Enum.GetName(_triglyceride.DynamicsScore)
                </div>
            </div>
            <div class="recommendations">
                @foreach (var recommendation in _triglyceride.Recommendations)
                {
                    <div class="recommendation">
                        <div>@recommendation.Description</div>
                        <hr />
                        <a class="recommendationLink" href="@recommendation.Study_Link">@recommendation.Study_Link</a>

                        @if (_userRoles.Contains("Admin"))
                        {
                            <hr />
                            <div class="adminButtons">
                                <button class="btn btn-outline-dark" @onclick=@(()=>{EditRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="m18.988 2.012 3 3L19.701 7.3l-3-3zM8 16h3l7.287-7.287-3-3L8 13z"></path><path d="M19 19H8.158c-.026 0-.053.01-.079.01-.033 0-.066-.009-.1-.01H5V5h6.847l2-2H5c-1.103 0-2 .896-2 2v14c0 1.104.897 2 2 2h14a2 2 0 0 0 2-2v-8.668l-2 2V19z"></path></svg></button>
                                <button class="btn btn-outline-dark" @onclick=@(async ()=>{await DeleteRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="M5 20a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V8h2V6h-4V4a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2H3v2h2zM9 4h6v2H9zM8 8h9v12H7V8z"></path><path d="M9 10h2v8H9zm4 0h2v8h-2z"></path></svg></button>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <br />
        <div class="parameter">
            <div class="dynamics">
                <div>HDL Cholesterol dynamics in change:</div>
                <br />
                <div class="displayTable">
                    <div>@m3</div>
                    <div>@m2</div>
                    <div>@m1</div>
                    <div class="@Enum.GetName(_HDLCholesterol.M3Score)">@_HDLCholesterol.M3Value</div>
                    <div class="@Enum.GetName(_HDLCholesterol.M2Score)">@_HDLCholesterol.M2Value</div>
                    <div class="@Enum.GetName(_HDLCholesterol.M1Score)">@_HDLCholesterol.M1Value</div>
                </div>
                <div class="dynamics">
                    @Enum.GetName(_HDLCholesterol.DynamicsScore)
                </div>
            </div>
            <div class="recommendations">
                @foreach (var recommendation in _HDLCholesterol.Recommendations)
                {
                    <div class="recommendation">
                        <div>@recommendation.Description</div>
                        <hr />
                        <a class="recommendationLink" href="@recommendation.Study_Link">@recommendation.Study_Link</a>

                        @if (_userRoles.Contains("Admin"))
                        {
                            <hr />
                            <div class="adminButtons">
                                <button class="btn btn-outline-dark" @onclick=@(()=>{EditRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="m18.988 2.012 3 3L19.701 7.3l-3-3zM8 16h3l7.287-7.287-3-3L8 13z"></path><path d="M19 19H8.158c-.026 0-.053.01-.079.01-.033 0-.066-.009-.1-.01H5V5h6.847l2-2H5c-1.103 0-2 .896-2 2v14c0 1.104.897 2 2 2h14a2 2 0 0 0 2-2v-8.668l-2 2V19z"></path></svg></button>
                                <button class="btn btn-outline-dark" @onclick=@(async ()=>{await DeleteRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="M5 20a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V8h2V6h-4V4a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2H3v2h2zM9 4h6v2H9zM8 8h9v12H7V8z"></path><path d="M9 10h2v8H9zm4 0h2v8h-2z"></path></svg></button>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <br />
        <div class="parameter">
            <div class="dynamics">
                <div>LDL Cholesterol dynamics in change:</div>
                <br />
                <div class="displayTable">
                    <div>@m3</div>
                    <div>@m2</div>
                    <div>@m1</div>
                    <div class="@Enum.GetName(_LDLCholesterol.M3Score)">@_LDLCholesterol.M3Value</div>
                    <div class="@Enum.GetName(_LDLCholesterol.M2Score)">@_LDLCholesterol.M2Value</div>
                    <div class="@Enum.GetName(_LDLCholesterol.M1Score)">@_LDLCholesterol.M1Value</div>
                </div>
                <div class="dynamics">
                    @Enum.GetName(_LDLCholesterol.DynamicsScore)
                </div>
            </div>
            <div class="recommendations">
                @foreach (var recommendation in _LDLCholesterol.Recommendations)
                {
                    <div class="recommendation">
                        <div>@recommendation.Description</div>
                        <hr />
                        <a class="recommendationLink" href="@recommendation.Study_Link">@recommendation.Study_Link</a>

                        @if (_userRoles.Contains("Admin"))
                        {
                            <hr />
                            <div class="adminButtons">
                                <button class="btn btn-outline-dark" @onclick=@(()=>{EditRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="m18.988 2.012 3 3L19.701 7.3l-3-3zM8 16h3l7.287-7.287-3-3L8 13z"></path><path d="M19 19H8.158c-.026 0-.053.01-.079.01-.033 0-.066-.009-.1-.01H5V5h6.847l2-2H5c-1.103 0-2 .896-2 2v14c0 1.104.897 2 2 2h14a2 2 0 0 0 2-2v-8.668l-2 2V19z"></path></svg></button>
                                <button class="btn btn-outline-dark" @onclick=@(async ()=>{await DeleteRecommendation(recommendation.Id);})><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);"><path d="M5 20a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V8h2V6h-4V4a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2H3v2h2zM9 4h6v2H9zM8 8h9v12H7V8z"></path><path d="M9 10h2v8H9zm4 0h2v8h-2z"></path></svg></button>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

    }
</div>

<div class="bottom-section"><input class="form-control" type="email" @bind-value="_emailAddress" placeholder="email@site.com" /> <button class="btn btn-info" @onclick="SendPage">Send as Email</button></div>



@code {
    ApplicationUser _user;
    List<string> _userRoles = new();
    List<Recommendation> _recommendations = new();
    string? _userId;
    List<MedicalInformation> _m1Info;
    List<MedicalInformation> _m2Info;
    List<MedicalInformation> _m3Info;
    int _m1MetabolicHealth, _m2MetabolicHealth, _m3MetabolicHealth;
    HealthScore _m1Score, _m2Score, _m3Score;
    ParameterStats _metabolicHealth, _BMI, _waistSize, _insulin, _CGM, _triglyceride, _bloodPressure, _HDLCholesterol, _LDLCholesterol, _restingHeartRate;
    string _emailAddress;

    protected override async Task OnInitializedAsync()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        _userId = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        _userRoles = authState.User.Claims.Where(c => c.Type == ClaimTypes.Role).Select(x => x.Value).ToList();
        _user = await UserManager.FindByIdAsync(_userId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            using var context = DbFactory.CreateDbContext();
            int medicalInfoId;

            if (context.MedicalInformation.Count() < 1)
                medicalInfoId = 0;
            else
                medicalInfoId = context.MedicalInformation.OrderByDescending(x => x.Id).First().Id;

            //fetch 3 months worth of data from the database
            _m1Info = context.MedicalInformation.Where(x => x.UserId == _userId && x.Entry_Date.Month == DateTime.Now.Month && x.Entry_Date.Year == DateTime.Now.Year).ToList();
            if (_m1Info.Count < 9)//partial or no info at all for this month = make new info
                _m1Info = GenerateMonthlyData(context, _userId, ref medicalInfoId);

            _m1Info = _m1Info.OrderBy(x => x.InformationTypeId).ToList();
            _m2Info = context.MedicalInformation.Where(x => x.UserId == _userId && x.Entry_Date.Month == DateTime.Now.AddMonths(-1).Month && x.Entry_Date.Year == DateTime.Now.AddMonths(-1).Year).ToList();

            if (_m2Info.Count < 9)
                _m2Info = GenerateMonthlyData(context, _userId, ref medicalInfoId, 1);

            _m2Info = _m2Info.OrderBy(x => x.InformationTypeId).ToList();
            _m3Info = context.MedicalInformation.Where(x => x.UserId == _userId && x.Entry_Date.Month == DateTime.Now.AddMonths(-2).Month && x.Entry_Date.Year == DateTime.Now.AddMonths(-2).Year).ToList();

            if (_m3Info.Count < 9)
                _m3Info = GenerateMonthlyData(context, _userId, ref medicalInfoId, 2);

            _m3Info = _m3Info.OrderBy(x => x.InformationTypeId).ToList();

            _metabolicHealth = new ParameterStats(
                Parameter.MetabolicHealth,
                _user,
                GetMetabolicHealth(_user,
            _m1Info.LastOrDefault(x => x.InformationTypeId == 1).Value,
            _m1Info.LastOrDefault(x => x.InformationTypeId == 2).Value,
            _m1Info.LastOrDefault(x => x.InformationTypeId == 2).SecondaryValue.Value,
            _m1Info.LastOrDefault(x => x.InformationTypeId == 3).Value,
            _m1Info.LastOrDefault(x => x.InformationTypeId == 4).Value,
            _m1Info.LastOrDefault(x => x.InformationTypeId == 5).Value,
            _m1Info.LastOrDefault(x => x.InformationTypeId == 6).Value,
            _m1Info.LastOrDefault(x => x.InformationTypeId == 7).Value,
            _m1Info.LastOrDefault(x => x.InformationTypeId == 8).Value,
            _m1Info.LastOrDefault(x => x.InformationTypeId == 9).Value
        ),
                GetMetabolicHealth(_user,
        _m2Info.LastOrDefault(x => x.InformationTypeId == 1).Value,
        _m2Info.LastOrDefault(x => x.InformationTypeId == 2).Value,
        _m2Info.LastOrDefault(x => x.InformationTypeId == 2).SecondaryValue.Value,
        _m2Info.LastOrDefault(x => x.InformationTypeId == 3).Value,
        _m2Info.LastOrDefault(x => x.InformationTypeId == 4).Value,
        _m2Info.LastOrDefault(x => x.InformationTypeId == 5).Value,
        _m2Info.LastOrDefault(x => x.InformationTypeId == 6).Value,
        _m2Info.LastOrDefault(x => x.InformationTypeId == 7).Value,
        _m2Info.LastOrDefault(x => x.InformationTypeId == 8).Value,
        _m2Info.LastOrDefault(x => x.InformationTypeId == 9).Value
        ),
                GetMetabolicHealth(_user,
        _m3Info.LastOrDefault(x => x.InformationTypeId == 1).Value,
        _m3Info.LastOrDefault(x => x.InformationTypeId == 2).Value,
        _m3Info.LastOrDefault(x => x.InformationTypeId == 2).SecondaryValue.Value,
        _m3Info.LastOrDefault(x => x.InformationTypeId == 3).Value,
        _m3Info.LastOrDefault(x => x.InformationTypeId == 4).Value,
        _m3Info.LastOrDefault(x => x.InformationTypeId == 5).Value,
        _m3Info.LastOrDefault(x => x.InformationTypeId == 6).Value,
        _m3Info.LastOrDefault(x => x.InformationTypeId == 7).Value,
        _m3Info.LastOrDefault(x => x.InformationTypeId == 8).Value,
        _m3Info.LastOrDefault(x => x.InformationTypeId == 9).Value
        )
            );

            var isMale = _user.Gender.Equals("male", StringComparison.CurrentCultureIgnoreCase);
            _waistSize = new ParameterStats(isMale ? Parameter.WaistMale : Parameter.WaistFemale, _user, _m1Info.LastOrDefault(x => x.InformationTypeId == 1).Value, _m2Info.LastOrDefault(x => x.InformationTypeId == 1).Value, _m3Info.LastOrDefault(x => x.InformationTypeId == 1).Value);
            _bloodPressure = new ParameterStats(Parameter.BloodPressureUpper, _user, _m1Info.LastOrDefault(x => x.InformationTypeId == 2).Value, _m2Info.LastOrDefault(x => x.InformationTypeId == 2).Value, _m3Info.LastOrDefault(x => x.InformationTypeId == 2).Value, _m1Info.LastOrDefault(x => x.InformationTypeId == 2).SecondaryValue.Value, _m2Info.LastOrDefault(x => x.InformationTypeId == 2).SecondaryValue.Value, _m3Info.LastOrDefault(x => x.InformationTypeId == 2).SecondaryValue.Value);
            _BMI = new ParameterStats(Parameter.BMI, _user, _m1Info.LastOrDefault(x => x.InformationTypeId == 3).Value, _m2Info.LastOrDefault(x => x.InformationTypeId == 3).Value, _m3Info.LastOrDefault(x => x.InformationTypeId == 3).Value);
            _restingHeartRate = new ParameterStats(Parameter.RestingHeartRate, _user, _m1Info.LastOrDefault(x => x.InformationTypeId == 4).Value, _m2Info.LastOrDefault(x => x.InformationTypeId == 4).Value, _m3Info.LastOrDefault(x => x.InformationTypeId == 4).Value);
            _CGM = new ParameterStats(Parameter.CGM, _user, _m1Info.LastOrDefault(x => x.InformationTypeId == 5).Value, _m2Info.LastOrDefault(x => x.InformationTypeId == 5).Value, _m3Info.LastOrDefault(x => x.InformationTypeId == 5).Value);
            _insulin = new ParameterStats(Parameter.Insulin, _user, _m1Info.LastOrDefault(x => x.InformationTypeId == 6).Value, _m2Info.LastOrDefault(x => x.InformationTypeId == 6).Value, _m3Info.LastOrDefault(x => x.InformationTypeId == 6).Value);
            _triglyceride = new ParameterStats(Parameter.Triglyceride, _user, _m1Info.LastOrDefault(x => x.InformationTypeId == 7).Value, _m2Info.LastOrDefault(x => x.InformationTypeId == 7).Value, _m3Info.LastOrDefault(x => x.InformationTypeId == 7).Value);
            _HDLCholesterol = new ParameterStats(Parameter.HDLCholesterol, _user, _m1Info.LastOrDefault(x => x.InformationTypeId == 8).Value, _m2Info.LastOrDefault(x => x.InformationTypeId == 8).Value, _m3Info.LastOrDefault(x => x.InformationTypeId == 8).Value);
            _LDLCholesterol = new ParameterStats(Parameter.LDLCholesterol, _user, _m1Info.LastOrDefault(x => x.InformationTypeId == 9).Value, _m2Info.LastOrDefault(x => x.InformationTypeId == 9).Value, _m3Info.LastOrDefault(x => x.InformationTypeId == 9).Value);
            _recommendations.Clear();

            if (_userRoles.Contains("Admin"))
            {
                _metabolicHealth.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 10).Select(x => x.Recommendation).Distinct().ToList();
                _waistSize.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 1).Select(x => x.Recommendation).Distinct().ToList();
                _bloodPressure.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 2).Select(x => x.Recommendation).Distinct().ToList();
                _BMI.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 3).Select(x => x.Recommendation).Distinct().ToList();
                _restingHeartRate.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 4).Select(x => x.Recommendation).Distinct().ToList();
                _CGM.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 5).Select(x => x.Recommendation).Distinct().ToList();
                _insulin.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 6).Select(x => x.Recommendation).Distinct().ToList();
                _triglyceride.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 7).Select(x => x.Recommendation).Distinct().ToList();
                _HDLCholesterol.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 8).Select(x => x.Recommendation).Distinct().ToList();
                _LDLCholesterol.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 9).Select(x => x.Recommendation).Distinct().ToList();
            }
            else
            {
                _metabolicHealth.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 10 && x.DynamicsScore == _metabolicHealth.DynamicsScore).Select(x => x.Recommendation).Distinct().ToList();
                _waistSize.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 1 && x.DynamicsScore == _waistSize.DynamicsScore).Select(x => x.Recommendation).Distinct().ToList();
                _bloodPressure.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 2 && x.DynamicsScore == _bloodPressure.DynamicsScore).Select(x => x.Recommendation).Distinct().ToList();
                _BMI.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 3 && x.DynamicsScore == _BMI.DynamicsScore).Select(x => x.Recommendation).Distinct().ToList();
                _restingHeartRate.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 4 && x.DynamicsScore == _restingHeartRate.DynamicsScore).Select(x => x.Recommendation).Distinct().ToList();
                _CGM.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 5 && x.DynamicsScore == _CGM.DynamicsScore).Select(x => x.Recommendation).ToList();
                _insulin.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 6 && x.DynamicsScore == _insulin.DynamicsScore).Select(x => x.Recommendation).Distinct().ToList();
                _triglyceride.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 7 && x.DynamicsScore == _triglyceride.DynamicsScore).Select(x => x.Recommendation).Distinct().ToList();
                _HDLCholesterol.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 8 && x.DynamicsScore == _HDLCholesterol.DynamicsScore).Select(x => x.Recommendation).Distinct().ToList();
                _LDLCholesterol.Recommendations = context.TriggerParameters.Where(x => x.InformationTypeId == 9 && x.DynamicsScore == _LDLCholesterol.DynamicsScore).Select(x => x.Recommendation).Distinct().ToList();
            }

            StateHasChanged();
        }
    }

    private async Task SendPage()
    {
        //if there is no data, there is nothing to send
        if (_m1Info is not null)
        {
            // var image = await JSRuntime.InvokeAsync<string>("getPageAsImage");
            var image = await JSRuntime.InvokeAsync<string>("getElementAsImage", "container");
            string m1 = _m1Info.First().Entry_Date.ToString("MMMM", CultureInfo.InvariantCulture),
            m2 = _m2Info.First().Entry_Date.ToString("MMMM", CultureInfo.InvariantCulture),
            m3 = _m3Info.First().Entry_Date.ToString("MMMM", CultureInfo.InvariantCulture);
            var year = (_m1Info.First().Entry_Date.Year == _m3Info.First().Entry_Date.Year) ? _m1Info.First().Entry_Date.Year.ToString() : $"{_m1Info.First().Entry_Date.Year} - {_m3Info.First().Entry_Date.Year}";
            await EmailService.SendEmailWithImageAsync(_emailAddress, $"Recommendations for {m1}, {m2}, {m3} - {year} ", "", image);
            await JSRuntime.InvokeVoidAsync("refreshWithMessage", "The Email has been sent");
        }

    }

    private void EditRecommendation(int id)
    {
        NavigationManager.NavigateTo($"/recommendations/edit/{id}");
    }

    private async Task DeleteRecommendation(int id)
    {
        var result = await JSRuntime.InvokeAsync<bool>("confirmAction", "Are you sure you want to delete this recommendation?");

        if (result)
        {
            using var context = DbFactory.CreateDbContext();
            //delete the parameters first as they rely on the recommendation
            context.TriggerParameters.RemoveRange(context.TriggerParameters.Where(x => x.RecommendationId == id));
            context.Recommendations.Remove(context.Recommendations.SingleOrDefault(x => x.Id == id));
            await context.SaveChangesAsync();
            await JSRuntime.InvokeVoidAsync("refreshWithMessage", "The recommendation has been deleted.");
        }

    }

    private sealed class ParameterStats
    {
        public List<Recommendation> Recommendations { get; set; } = new();
        public Parameter ParameterType;
        public float M1Value, M2Value, M3Value;
        public float M1SecondValue, M2SecondValue, M3SecondValue;
        public HealthScore M1Score, M2Score, M3Score;
        public DynamicsScore DynamicsScore;

        public ParameterStats(Parameter parameterType, ApplicationUser user, float m1Value, float m2Value, float m3Value, float m1SecondValue = 0, float m2SecondValue = 0, float m3SecondValue = 0)
        {
            this.M1Value = m1Value;
            this.M2Value = m2Value;
            this.M3Value = m3Value;
            this.M1SecondValue = m1SecondValue;
            this.M2SecondValue = m2SecondValue;
            this.M3SecondValue = m3SecondValue;
            this.ParameterType = parameterType;
            this.M1Score = GetHealthScore(user, this.ParameterType, m1Value, m1SecondValue);
            this.M2Score = GetHealthScore(user, this.ParameterType, m2Value, m2SecondValue);
            this.M3Score = GetHealthScore(user, this.ParameterType, m3Value, m3SecondValue);
            this.DynamicsScore = GetDynamic(user, this.ParameterType, m1Value, m2Value, m3Value, m1SecondValue, m2SecondValue, m3SecondValue);
        }

    }
}
