@page "/messages"
@using HealthSystem.Data
@using static Data.Utils
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@rendermode InteractiveServer

<div class="container">
    <div class="messageList">
        <div class="messageListTitle">Messages</div>
        @foreach (var thread in _messageThreads)
        {
            <div class="messageThread @(thread[0].ReadDate.HasValue?"":"bold") @(thread[0].Id==_currentMessageId?"active":"")" @onclick="async ()=>{await SetActive(thread[0].Id);}">
                <div class="messageThreadDate">@thread.Last().Date</div>
                <div class="messageThreadTitle">
                    <div class="threadTitle">@thread[0].Title</div>
                    @if (string.IsNullOrEmpty(thread[0].Image))
                    {
                        <div class="threadMessageIcon"></div>
                    }
                    else
                    {
                        <div class="threadMessageIcon"><button class="btn btn-sm btn-outline-dark" @onclick="@(async ()=>{await DownloadImage(thread[0].Image);})"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1); transform:rotate(270deg);"><path d="M17.004 5H9c-1.838 0-3.586.737-4.924 2.076C2.737 8.415 2 10.163 2 12c0 1.838.737 3.586 2.076 4.924C5.414 18.263 7.162 19 9 19h8v-2H9c-1.303 0-2.55-.529-3.51-1.49C4.529 14.55 4 13.303 4 12c0-1.302.529-2.549 1.49-3.51C6.45 7.529 7.697 7 9 7h8V6l.001 1h.003c.79 0 1.539.314 2.109.886.571.571.886 1.322.887 2.116a2.966 2.966 0 0 1-.884 2.11A2.988 2.988 0 0 1 17 13H9a.99.99 0 0 1-.698-.3A.991.991 0 0 1 8 12c0-.252.11-.507.301-.698A.987.987 0 0 1 9 11h8V9H9c-.79 0-1.541.315-2.114.889C6.314 10.461 6 11.211 6 12s.314 1.54.888 2.114A2.974 2.974 0 0 0 9 15h8.001a4.97 4.97 0 0 0 3.528-1.473 4.967 4.967 0 0 0-.001-7.055A4.95 4.95 0 0 0 17.004 5z"></path></svg></button></div>
                    }

                </div>
            </div>
        }
    </div>
    <div class="messageDetails">
        @if (_currentMessageId > 0)
        {
            <div class="messageContentTitle">
                Message
            </div>

            <div class="messageContent">
                @foreach (var threadMessage in _currentThread)
                {
                    <div class="@(threadMessage.SenderId == _user.Id ? "right" : "left")">
                        @threadMessage.Content
                    </div>
                }
            </div>
            <hr />

            <div class="reply">
                <span>Reply</span>
                <EditForm method="post" Model="Message" OnValidSubmit="SendResponse">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="mb-3">
                        <label for="description" class="form-label">Message:</label>
                        <InputText id="description" @bind-Value="Message.Content" autocomplete="off" class="form-control" />
                        <ValidationMessage For="() => Message.Content" class="text-danger" />
                    </div>
                    <button type="submit" class="btn btn-primary">Reply</button>
                </EditForm>
            </div>
        }
    </div>
</div>


@code {
    Message Message { get; set; } = new();
    List<Message> _messages = new();
    List<List<Message>> _messageThreads = new();
    int _currentMessageId = 0;
    List<Message> _currentThread;
    ApplicationUser _admin;
    ApplicationUser _user;

    protected override async Task OnInitializedAsync()
    {
        _admin = await UserManager.FindByEmailAsync("admin@site.com");

        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        _user = await UserManager.FindByEmailAsync(authState.User.Identity.Name);

        using var Context = DbFactory.CreateDbContext();
        //all sent and received messages, should include all of the "related" messages too as users cannot send to other users
        _messages = Context.Message.Include("Sender").Include("Receiver").Where(x => x.SenderId == _user.Id || x.ReceiverId == _user.Id).OrderByDescending(x => x.Date).ToList();
        //all of the messages that were conversation starters
        _messageThreads = GetMessagesByThread(_messages);
    }

    async Task SendResponse(EditContext editContext)
    {
        var currentMessage = _currentThread.Last();

        var response = new Message
            {
                Content = Message.Content,
                SenderId = _user.Id,
                ReceiverId = currentMessage.SenderId,
                Date = DateTime.Now,
                PreviousMessageId = currentMessage.Id,
                Title = currentMessage.Title

            };

        using var Context = DbFactory.CreateDbContext();
        Context.Message.Add(response);
        await Context.SaveChangesAsync();
        //add the message to the current thread without re-fetching it from the database
        _currentThread.Add(response);
        _messages = Context.Message.Include("Sender").Include("Receiver").Where(x => x.SenderId == _user.Id || x.ReceiverId == _user.Id).OrderByDescending(x => x.Date).ToList();
        _messageThreads = GetMessagesByThread(_messages);
        Message.Content = "";
        StateHasChanged();
    }

    async Task SetActive(int messageId)
    {
        _currentMessageId = messageId;
        _currentThread = _messageThreads.Single(x => x[0].Id == messageId);
        //make sure the messages are in the right chronological order(oldest first)
        _currentThread = _currentThread.OrderBy(x => x.Date).ToList();
        _currentThread[0].ReadDate = DateTime.Now;
        using var Context = DbFactory.CreateDbContext();
        Context.Message.Single(x => x.Id == messageId).ReadDate = DateTime.Now;
        await Context.SaveChangesAsync();
        StateHasChanged();
    }

    async Task DownloadImage(string image)
    {
        await JSRuntime.InvokeVoidAsync("downloadImage", image);
    }
}
